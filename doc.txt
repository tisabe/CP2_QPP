Hier die Liste für Arbeitsteilung:
einzelne Funktionen und Tests werden genau beschrieben und wer dafür zuständig ist

COORD2INDEX (Tim)
	input:
		coord: coordinates of a point					long int array of size D
 		N: length of all axis						long int
		D: number of dimensions						unsigned int
	output:
		i: raveled index depending on coordinates			long int
	Tested by: Lennart - successful

INDEX2COORD (Tim)
	input:
		*coord: array in which to store coordinates			long int array of size D
	  	index: index of array						long int
		N: length of all axis						long int
		D: number of dimensions						unsigned int
	output:
		void
	Tested by: Lennart - successful

NNEIGHBOUR (Lennart, tested)
	input:
		index: of a point i						long int
		a: axis along which neighbour is computed			unsigned int: 0, 1 or 2
		p: direction in which neighbour is computed			int: -1 or +1
		N: length of each axis						long int
		D: number of dimensions						unsigned int
	output:
		i: index of nearest neighbour on specified axis and direction	long int
	Test: Tim (läuft, parameter könnten noch geändert werden)

nneighbour_init (Lennart, tested)
	input:
		*out : flat array with all next neighbours            long int array of size 2*D*N
		N: length of each axis						long int
		D: number of dimensions						unsigned int
	output:
		void
laplacian (Lennart, wip)
	input:
		*out: vector with laplacian of wave function			complex double array of size N**D
		*in: vector of discretized wavefunction				complex double array of size N**D
		N: length of each axis						long int
		D: number of dimensions						unsigned int
	output:
		void
	Test: Tim - success

phi (Birkan, wip)
	input:
		N: length of all axis						long int
		D: number of dimensions						unsigned int
		type: number corresponding to one possible configuration of PHI int
	output:
		*out: vector with wave function					complex double array of size N**D

kinetic (Birkan)
	input:
		N: length of all axis						long int
		D: number of dimensions						unsigned int
		*in: vector of discretized wavefunction				complex double array of size N**D
	output:
		*out: vector with laplacian of wave function			complex double array of size N**D

harmonic (Mahni)
	input: index, omega, N, D						long int, int, int, int
	output: potential							double
	Test: ? wip
box (Mahni)
	input: index, height, N, D						long int, int, int, int
	output: potential of a box						double
	Test: ? wip
potentialwell (Mahni)
	input:  height, N, D							int, int, int
	output: potential of a box in an array with the size of N**D		double
	Test: ? wip

step_euler (Lennart)
	input:
		*out: psi after one time step					double complex array of size L
		*in: input vector psi						double complex array of size L
		params: parameters struct
	output:
		void
	Moved to integrators.c

cg (Conjugate Gradient, Tim)
	input:
		*out: x to solve Ax=b						double complex of size L
		(*f): function A to call					function pointer
			in: double complex *(out), double complex *(in), long int (L)
		*in: b in Ax=b							double complex of size L
        params: function parameters             parameters struct
	output:
		void
	Test: Lennart, successfully tested with solving for x with random herm. str. pos. def. matrix A and random vector b in Ax=b
	Moved to vmath.c

step_cn (Tim)
	input:
		*out: psi after one time step					double complex array of size L
		*in: input vector psi						double complex array of size L
		params: parameters struct
	output:
		void
	Not running yet!
	Moved to integrators.c

step_strang (Mahni)
	input:
		*out: psi after one time step					double complex array of size L
		*in: input vector psi						double complex array of size L
		params: parameters struct
	output:
		void
	Moved to integrators.c

vmath (Tim)
	many different functions
<<<<<<< HEAD
	Test: none
=======
	

//the following functions are included in observables.c
{
obs_norm		(Computes the normalization of a wavefunction)
	input:
		*in: input vector						double complex
		params: parameters struct
	output:
		var_norm: normalization factor					double complex

obs_E			(Computes the energy expectation value for a given wavefunction and hamiltonian)
	input:
		*in: input vector						double complex
		params: parameters struct

	output:
		var_E: average energy						double complex

obs_x			(Computes the average position of a wavefunction in dimension d given the
  			number of dimensions D and length of axis N using the struct params.
  			According to eq. 84.)
	input:
		*in: input vector						double complex
		d: component (or dimension) of average position			unsigned int
		params: parameters struct

	output:
		var_x: average position						double complex

obs_delta_x			(Computes the position width of a wavefunction given the number of
  				dimensions D and length of axis N using the struct params.
  				According to eq. 85.)
	input:
		*in: input vector						double complex
		params: parameters struct

	output:
		var_x: position	width						double complex

obs_p			(Computes the average momentum of a wavefunction in dimension d given the
  			number of dimensions D and length of axis N using the struct params.
  			According to eq. 89.)
	input:
		*in: input vector						double complex
		d: component (or dimension) of average momentum			unsigned int
		params: parameters struct

	output:
		var_x: average momentum						double complex

obs_delta_p		(Computes the momentum width of a wavefunction given the number of
  			dimensions D and length of axis N using the struct params.
  			According to eq. 90.)
		input:
		*in: input vector						double complex
		params: parameters struct

	output:
		var_x: momentum	width						double complex
}

>>>>>>> ecacb78a41c6b2a1f10bbe26ca9a16d9b2332099

gen_pot_harmonic (Birkan, tbt)
	input:
		*params,			parameters structs (benutze wie in https://stackoverflow.com/questions/4316314/pass-struct-by-reference-in-c/13077250, 1. Antwort,
									also als pointer, sodass das übergebene struct bearbeitet wird, mit modifikation des potentials mit params->pot[i] = BERECHNUNG)
		omega, 								double
		height, (scale) 			double

gen_pot_well (Birkan, tbt)
	wie die vorherige, mit höhe und breite des potentials als parameter, ebenso

gen_pot_box (Birkan, tbt)

Observables:

obs_norm (Tim)
	input:
		*in,		wavefunction as array with parameters from params, mainly N and D, double complex
		params,	parameter struct
	output:
		normalization of the wave function, double complex

obs_norm (Tim)
	input:
		*in,		wavefunction as array with parameters from params, double complex
		params,	parameter struct
	output:
		energy expectation value of the wave function, double complex

obs_x (Tim)
	input:
		*in,		wavefunction as array with parameters from params, mainly N and D, double complex
		d,			axis in which to calculate the average position, unsigned int
		params,	parameter struct
	output:
		average position in axis d, double complex

obs_delta_x (Tim)
	input:
		*in,		wavefunction as array with parameters from params, mainly N and D, double complex
		params,	parameter struct
	output:
		position width, double complex

obs_p (Tim, Mahni)
	input:
		*in,		wavefunction as array with parameters from params, mainly N and D, double complex
		d,			axis in which to calculate the average momentum, unsigned int
		params,	parameter struct
	output:
		average position in axis d, double complex

obs_delta_x (Tim)
	input:
		*in,		wavefunction as array with parameters from params, mainly N and D, double complex
		params,	parameter struct
	output:
		momentum width, double complex

(all observables outputs should be real, but imaginary part can be checked for consistency)
